from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel # Or whatever model you use for your items

# --- App Setup ---
app = FastAPI()

# --- CORS CONFIGURATION ---
# This is the critical part that must allow your frontend's local address
origins = [
    "http://localhost:5173",  # Your local React Dev Server
    "https://web-umber.vercel.app"
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,          # List of origins allowed to connect
    allow_credentials=True,         # Allow cookies/credentials
    allow_methods=["*"],            # Allow all HTTP methods (GET, POST, PUT, DELETE)
    allow_headers=["*"],            # Allow all request headers
)

# --- Item Model (Example - Adjust this to match your actual database model) ---
class Item(BaseModel):
    title: str
    description: str | None = None
    id: int | None = None # Usually generated by the DB

# --- 1. Your Working GET Route (Read All) ---
@app.get("/items")
async def read_items():
    # Replace this with your actual database query to fetch all items
    # For now, we return dummy data so the frontend shows something useful
    return [
        {"title": "Dummy Item from Code", "description": "If you see this, the connection works!"}
    ]

# --- 2. YOUR MISSING POST ROUTE (Create Item) ---
@app.post("/items")
async def create_item(item: Item):
    # --- 3. DATABASE LOGIC GOES HERE ---
    # Example: Save the item to your database (e.g., SQLite, PostgreSQL)
    # db_item = create_item_in_db(item) 
    
    # For now, we simulate success by returning the created item
    print(f"Received new item: {item.title}")
    
    # Return the created item (or success message)
    return {"message": "Item created successfully", "data": item}

# --- Root Route (Ensure it accepts GET) ---
@app.get("/")
async def root():
    # This is the route that likely fixed your 405 error on Render!
    return {"status": "Server is running and ready for requests!"}